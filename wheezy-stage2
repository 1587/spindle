#!/bin/sh
# Part of spindle http://asbradbury.org/projects/spindle
#
# See LICENSE file for copyright and license details

set -ex

CURIMG=stage2.qed

. ./common

# For now we add a root user (this is a totally minimal system). It should be 
# disabled at a later stage
configure_users() {
  onvm_chroot sh -l -ex - <<EOF
adduser --disabled-password --gecos "" pi
echo "pi:raspberry" | chpasswd
echo "root:root" | chpasswd
EOF
}

configure_fstab() {
  onvm_chroot sh -l -e - <<EOF1
cat <<EOF2 > /etc/fstab
proc            /proc           proc    defaults          0       0
/dev/mmcblk0p1  /boot           vfat    defaults          0       0
/dev/mmcblk0p2  /               ext4    defaults,noatime  0       0
EOF2
EOF1
}

configure_sources_list() {
  onvm_chroot sh -l -e - <<EOF
  printf "deb $DEB_MIRROR wheezy main non-free\n" > /etc/apt/sources.list
EOF
}

configure_network_interfaces() {
  onvm_chroot sh -l -e - <<EOF1
cat <<EOF2 > /etc/network/interfaces
auto lo

iface lo inet loopback
iface eth0 inet dhcp
EOF2
EOF1
}

configure_hostname() {
  onvm_chroot sh -l -e - <<EOF
echo raspberrypi > /etc/hostname
printf "127.0.1.1\traspberrypi\n" >> /etc/hosts
EOF
}

disable_eth_renaming() {
  onvm_chroot sh -l -e - <<EOF
sed -i -e 's/KERNEL\!="eth\*|/KERNEL\!="/' /lib/udev/rules.d/75-persistent-net-generator.rules
EOF
}

# Due to a change of behaviour in getty, we must pass --noclear to ensure our 
# boot messages don't get cleared
# Also, spawn a getty on the serial line
configure_inittab() {
  onvm_chroot sh -l -e - <<\EOF
sed -i -e "s/^\(1:2345.*\)getty\(.*tty1\)$/\1getty --noclear\2/" /etc/inittab
printf "\n#Spawn a getty on Raspberry Pi serial line\n" >> /etc/inittab
printf "T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100\n" >> /etc/inittab
EOF
}

adjust_motd() {
  onvm_chroot sh -l -e <<\EOF1
cat <<EOF2 >> /etc/motd.tail
NOTE: this image is built using Spindle, http://asbradbury.org/projects/spindle
and is a WORK IN PROGRESS. As such, you should expect to need to update to a
new release from raspberrypi.org in the near future. Thank you for your
assistance in testing.

EOF2
EOF1
}

install_firmware() {
  onvm_chroot sh -l -e - <<EOF
echo "deb http://asbradbury.org/tmp/raspi/tmp_repo wheezy main" > /etc/apt/sources.list.d/raspi.list
apt-get update
apt-get install --allow-unauthenticated -y libraspberrypi-bin libraspberrypi0 raspberrypi-bootloader
cp -a /boot/arm192_start.elf /boot/start.elf # default to 129mb memory split
echo "dwc_otg.lpm_enable=0 console=ttyAMA0,115200 kgdboc=ttyAMA0,115200 \
root=/dev/mmcblk0p2 rootfstype=ext4 rootwait" > /boot/cmdline.txt
EOF
}

# Deprecated in favour of using the Debian packaging
download_and_extract_firmware_if_necessary() {
  if ! [ -d firmware ]; then
    git clone git://github.com/raspberrypi/firmware.git
  fi
}

cd $WORKDIR
dotask branch_image ../$OUTDIR/stage1.qed $CURIMG
dotask run_qemu $CURIMG
dotask mount_apt_cache
dotask disable_starting_services
dotask configure_users
dotask configure_fstab
dotask configure_sources_list
dotask configure_network_interfaces
dotask configure_hostname
dotask disable_eth_renaming
dotask keep_boot_messages
dotask adjust_motd
dotask install_firmware
dotask update_issue
dotask allow_starting_services
dotask shutdown_qemu
#dotask download_and_extract_firmware_if_necessary
sudo -v
# We have to copy the /boot from root partition to boot partition. Temporary 
# hack
dotask attach_image_to_nbd $CURIMG $NBD_DEV
mkdir -p boot
dotask sudo mount $BOOT_DEV boot
mkdir -p rootfs
dotask sudo mount $ROOT_DEV rootfs
dotask sudo mv rootfs/boot/* boot
universal_cleanup
dotask finish_image
